Q. Create Tables and Insert Records

We'll create two tables: students and courses. The students table will store student information, and the courses table will store course information. We'll insert some sample records into these tables.

-- Create the students table

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50),
    age INT,
    course_id INT
);

-- Insert records into the students table

INSERT INTO students (student_id, student_name, age, course_id)

VALUES

    (1, 'John Smith', 22, 1),
    (2, 'Jane Doe', 20, 2),
    (3, 'Robert Johnson', 25, 1),
    (4, 'Lisa Wang', 21, 3),
    (5, 'Michael Brown', 32, 2);

-- Create the courses table

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50)
);

-- Insert records into the courses table

INSERT INTO courses (course_id, course_name)
VALUES
    (1, 'Math'),
    (2, 'History'),
    (3, 'Science');

Q.1 Retrieve the names of students and the names of the courses they are enrolled in.

1-->
SELECT student_name, course_name
FROM students
JOIN courses ON students.course_id = courses.course_id;

Q.2 Find the total number of students in each course.

2-->
SELECT courses.course_name, COUNT(*) AS total_students
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY courses.course_name;

Q.3 Retrieve the names of students who are older than 21 years.

3-->
SELECT student_name, age
FROM students
WHERE age > 21;

Q.4 Find the average age of students in each course.

4-->
SELECT courses.course_name, AVG(students.age) AS average_age
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY courses.course_name;

Q.5 Retrieve the course with the highest number of enrolled students.

5-->
SELECT course_name
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name
ORDER BY COUNT(*) DESC
LIMIT 1;


Q. Create Tables and Insert Records

We'll create two tables: students and courses. The students table will store student information, and the courses table will store course information. We'll insert some sample records into these tables.

-- Create the students table

CREATE TABLE students (

    student_id INT PRIMARY KEY,

    student_name VARCHAR(50),

    age INT,

    course_id INT

);

- Insert records into the students table

INSERT INTO students (student_id, student_name, age, course_id)

VALUES(1, 'John Smith', 22, 1),(2, 'Jane Doe', 20, 2), (3, 'Robert Johnson', 25, 1),(4, 'Lisa Wang',21, 3), (5, 'Michael Brown', 32, 2);

-- Create the courses table

CREATE TABLE courses ( course_id INT PRIMARY KEY,course_name VARCHAR(50));

-- Insert records into the courses table

INSERT INTO courses (course_id, course_name)VALUES    (1, 'Math'),   (2, 'History'),   (3, 'Science');

Q.1 Retrieve the names of students and the names of the courses they are enrolled in.

1-->
SELECT student_name, course_name
FROM students
JOIN courses ON students.course_id = courses.course_id;

Q.2 Find the total number of students in each course.

2-->
SELECT course_name, COUNT(*) AS total_students
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name;

Q.3 Retrieve the names of students who are older than 21 years.

3-->
SELECT student_name, age
FROM students
WHERE age > 21;

Q.4 Find the average age of students in each course.

4-->
SELECT course_name, AVG(age) AS average_age
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name;

Q.5 Retrieve the course with the highest number of enrolled students.

5-->
SELECT course_name
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name
ORDER BY COUNT(*) DESC
LIMIT 1;


Q. CREATE TABLE courses ( course_id INT PRIMARY KEY,course_name VARCHAR(50));

-- Insert records into the courses table

INSERT INTO courses (course_id, course_name)VALUES    (1, 'Math'),   (2, 'History'),   (3, 'Science');

Q.1 Retrieve the names of students and the names of the courses they are enrolled in.

1-->
SELECT student_name, course_name
FROM students
JOIN courses ON students.course_id = courses.course_id;

Q.2 Find the total number of students in each course.

2-->
SELECT course_name, COUNT(*) AS total_students
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name;

Q.3 Retrieve the names of students who are older than 21 years.

3-->
SELECT student_name, age
FROM students
WHERE age > 21;

Q.4 Find the average age of students in each course.

4-->
SELECT course_name, AVG(age) AS average_age
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name;

Q.5 Retrieve the course with the highest number of enrolled students.

5-->
SELECT course_name
FROM students
JOIN courses ON students.course_id = courses.course_id
GROUP BY course_name
ORDER BY COUNT(*) DESC
LIMIT 1;
