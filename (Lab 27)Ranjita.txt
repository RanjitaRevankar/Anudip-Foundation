1. Implement Queue in java with all operations.
  (without using in-built structures.)

1.-->

package com.collectdemo;

public class QueueDemo {
    
    int size = 3;  
    int items[] = new int[size];  
    int front = -1, rear = -1;

    
    boolean isFull() {
        return rear == size - 1;
    }

    
    boolean isEmpty() {
        return front == -1;
    }

    
    void insert(int data) {
        if (isFull()) {
            System.out.println("Queue is full! Cannot insert " + data);
            return;
        }
        if (isEmpty()) {
            front = 0;
        }
        rear++;
        items[rear] = data;
        System.out.println(data + " inserted.");
    }

    
    void remove() {
        if (isEmpty()) {
            System.out.println("Queue is empty! Cannot remove.");
            return;
        }
        System.out.println(items[front] + " removed.");
        if (front == rear) { 
            front = rear = -1;
        } else {
            front++;
        }
    }

    
    void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty!");
            return;
        }
        System.out.print("Queue: ");
        for (int i = front; i <= rear; i++) {
            System.out.print(items[i] + " ");
        }
        System.out.println();
    }
}
----------------------------------------------------

package com.collectdemo;

public class QueueMain {
    public static void main(String[] args) {
        QueueDemo q = new QueueDemo();

        q.insert(10);
        q.insert(20);
        q.insert(30);

        q.display();  

        q.insert(40); 

        q.remove();   
        q.display();  

        q.remove();   
        q.display();  

        q.remove();   
        q.display(); 
    }
}


Output:-->

	10 inserted.
	20 inserted.
	30 inserted.
	Queue: 10 20 30 
	Queue is full! Cannot insert 40
	10 removed.
	Queue: 20 30 
	20 removed.
	Queue: 30 
	30 removed.
	Queue is empty!


2. Implement Stack in java with all operations.
  (without using in-built structures.)

2.-->

package com.collectdemo;

public class Stack {
    int size;       
    int top;        
    int[] stackArr; 

    
    Stack(int size) {
        this.size = size;
        stackArr = new int[size];
        top = -1;  
    }

    
    void push(int data) {
        if (isFull()) {
            System.out.println("Stack is Full! Cannot push " + data);
            return;
        }
        stackArr[++top] = data;
        System.out.println("Pushed: " + data);
    }

    
    int pop() {
        if (isEmpty()) {
            System.out.println("Stack is Empty! Cannot pop");
            return -1;
        }
        return stackArr[top--];
    }

    
    int peek() {
        if (isEmpty()) {
            System.out.println("Stack is Empty! No top element");
            return -1;
        }
        return stackArr[top];
    }

    
    boolean isEmpty() {
        return top == -1;
    }

    
    boolean isFull() {
        return top == size - 1;
    }

    
    void display() {
        if (isEmpty()) {
            System.out.println("Stack is Empty!");
            return;
        }
        System.out.print("Stack Elements: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stackArr[i] + " ");
        }
        System.out.println();
    }
}
------------------------------------------
package com.collectdemo;

public class StackMain {
    public static void main(String[] args) {
        Stack myStack = new Stack(5); 

        myStack.push(10);
        myStack.push(20);
        myStack.push(30);
        myStack.display(); 

        System.out.println("Top Element: " + myStack.peek()); 

        System.out.println("Popped: " + myStack.pop()); 
        myStack.display(); 

        System.out.println("Is Stack Empty? " + myStack.isEmpty()); 
    }
}

Output:-->

	Pushed: 10
	Pushed: 20
	Pushed: 30
	Stack Elements: 10 20 30 
	Top Element: 30
	Popped: 30
	Stack Elements: 10 20 
	Is Stack Empty? false

